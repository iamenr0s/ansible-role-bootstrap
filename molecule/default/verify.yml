---
- name: Verify
  hosts: all
  become: true
  gather_facts: true
  tasks:
    # Verify ansible user creation and configuration
    - name: Check if ansible user exists
      ansible.builtin.command: id ansible
      register: ansible_user_check
      changed_when: false
      failed_when: false

    - name: Verify ansible user was created
      ansible.builtin.assert:
        that:
          - ansible_user_check.rc == 0
          - "'uid=' in ansible_user_check.stdout"
        fail_msg: "Ansible user was not created properly"

    - name: Check ansible user home directory
      ansible.builtin.stat:
        path: /home/ansible
      register: ansible_home

    - name: Verify ansible user home directory exists
      ansible.builtin.assert:
        that:
          - ansible_home.stat.exists
          - ansible_home.stat.isdir
          - ansible_home.stat.pw_name == 'ansible'
        fail_msg: "Ansible user home directory is not configured properly"

    - name: Check ansible user groups
      ansible.builtin.command: groups ansible
      register: ansible_groups
      changed_when: false

    - name: Verify ansible user is in correct group
      ansible.builtin.assert:
        that:
          - "('sudo' in ansible_groups.stdout) or ('wheel' in ansible_groups.stdout)"
        fail_msg: "Ansible user is not in sudo/wheel group"

    - name: Check ansible user sudo configuration
      ansible.builtin.stat:
        path: /etc/sudoers.d/ansible
      register: sudo_config

    - name: Verify sudo configuration exists
      ansible.builtin.assert:
        that:
          - sudo_config.stat.exists
          - sudo_config.stat.mode == '0440'
        fail_msg: "Ansible sudo configuration is missing or has wrong permissions"

    - name: Check ansible user .ssh directory
      ansible.builtin.stat:
        path: /home/ansible/.ssh
      register: ssh_dir

    - name: Verify .ssh directory configuration
      ansible.builtin.assert:
        that:
          - ssh_dir.stat.exists
          - ssh_dir.stat.isdir
          - ssh_dir.stat.mode == '0700'
          - ssh_dir.stat.pw_name == 'ansible'
        fail_msg: "Ansible user .ssh directory is not configured properly"

    # Verify SSH configuration
    - name: Check SSH configuration settings
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      check_mode: true
      register: ssh_config_check
      loop:
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }

    - name: Verify SSH is configured securely
      ansible.builtin.assert:
        that:
          - not item.changed
        fail_msg: "SSH configuration setting '{{ item.item.line }}' is not properly set"
      loop: "{{ ssh_config_check.results }}"

    - name: Check SSH service status
      ansible.builtin.systemd:
        name: "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"
      register: ssh_service

    - name: Verify SSH service is running and enabled
      ansible.builtin.assert:
        that:
          - ssh_service.status.ActiveState == 'active'
          - ssh_service.status.UnitFileState == 'enabled'
        fail_msg: "SSH service is not running or not enabled"

    # Verify swap is disabled
    - name: Check current swap status
      ansible.builtin.command: swapon --show
      register: swap_status
      changed_when: false
      failed_when: false

    - name: Verify swap is disabled
      ansible.builtin.assert:
        that:
          - swap_status.stdout == ""
        fail_msg: "Swap is still active"

    - name: Check fstab for commented swap entries
      ansible.builtin.shell: |
        set -o pipefail
        grep -E '^[^#].*swap' /etc/fstab || true
      register: fstab_swap_check
      changed_when: false

    - name: Verify swap entries are commented in fstab
      ansible.builtin.assert:
        that:
          - fstab_swap_check.stdout == ""
        fail_msg: "Active swap entries found in /etc/fstab"

    # Verify sysctl parameters
    - name: Check sysctl parameters
      ansible.builtin.command: "sysctl {{ item.name }}"
      register: sysctl_checks
      changed_when: false
      loop:
        - { name: vm.swappiness, value: 0 }
        - { name: net.ipv4.ip_forward, value: 1 }

    - name: Verify sysctl parameters are set correctly
      ansible.builtin.assert:
        that:
          - "'{{ item.item.name }} = {{ item.item.value }}' in item.stdout"
        fail_msg: "Sysctl parameter {{ item.item.name }} is not set to {{ item.item.value }}"
      loop: "{{ sysctl_checks.results }}"

    # Verify kernel modules
    - name: Check if overlay module is loaded
      ansible.builtin.command: lsmod
      register: loaded_modules
      changed_when: false

    - name: Verify overlay module is loaded
      ansible.builtin.assert:
        that:
          - "'overlay' in loaded_modules.stdout"
        fail_msg: "Overlay kernel module is not loaded"

    - name: Check kernel modules configuration file
      ansible.builtin.stat:
        path: /etc/modules-load.d/bootstrap.conf
      register: modules_config

    - name: Verify kernel modules configuration exists
      ansible.builtin.assert:
        that:
          - modules_config.stat.exists
        fail_msg: "Kernel modules configuration file is missing"

    # Verify hostname configuration
    - name: Check current hostname
      ansible.builtin.command: hostname
      register: current_hostname
      changed_when: false

    - name: Verify hostname is set correctly
      ansible.builtin.assert:
        that:
          - current_hostname.stdout == inventory_hostname
        fail_msg: "Hostname is not set to {{ inventory_hostname }}"

    # Verify /etc/hosts file
    - name: Check /etc/hosts file exists
      ansible.builtin.stat:
        path: /etc/hosts
      register: hosts_file

    - name: Verify /etc/hosts file configuration
      ansible.builtin.assert:
        that:
          - hosts_file.stat.exists
          - hosts_file.stat.mode == '0644'
        fail_msg: "/etc/hosts file is missing or has wrong permissions"

    # Verify essential services
    - name: Check essential services status
      ansible.builtin.systemd:
        name: "{{ item }}"
      register: service_status
      loop:
        - "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"
        - systemd-logind

    - name: Verify essential services are running
      ansible.builtin.assert:
        that:
          - item.status.ActiveState == 'active'
        fail_msg: "Service {{ item.item }} is not running"
      loop: "{{ service_status.results }}"

    # Final verification message
    - name: Display verification success
      ansible.builtin.debug:
        msg: "All bootstrap configurations have been verified successfully!"
