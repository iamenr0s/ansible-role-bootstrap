---
- name: Prepare
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:
        timeout: 900  # Increased from 300 to 900 seconds (15 minutes)

    - name: Gather facts
      ansible.builtin.setup:

    - name: Update package cache (Debian-based) with retries
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        force_apt_get: true
      when: ansible_os_family == 'Debian'
      retries: 3
      delay: 10
      register: apt_update_result
      until: apt_update_result is succeeded
      ignore_errors: true

    - name: Fallback apt update with different approach
      ansible.builtin.apt:
        update_cache: true
        force_apt_get: true
        cache_valid_time: 0  # Force update even if cache is recent
      when: 
        - ansible_os_family == 'Debian'
        - apt_update_result is failed
      retries: 2
      delay: 15
      register: fallback_apt_update
      failed_when: false
      changed_when: false

    - name: Check if apt is working
      ansible.builtin.command: apt-cache policy
      when: ansible_os_family == 'Debian'
      register: apt_check
      failed_when: false
      changed_when: false

    - name: Display apt status for debugging
      ansible.builtin.debug:
        msg: |
          APT Update Status:
          - Initial update: {{ 'SUCCESS' if apt_update_result is succeeded else 'FAILED' }}
          - Fallback update: {{ 'SUCCESS' if (fallback_apt_update is defined and fallback_apt_update.rc is defined and fallback_apt_update.rc == 0) else 'FAILED' if fallback_apt_update is defined else 'SKIPPED' }}
          - APT working: {{ 'YES' if (apt_check is defined and apt_check.rc is defined and apt_check.rc == 0) else 'NO' if apt_check is defined else 'UNKNOWN' }}
      when: ansible_os_family == 'Debian'

    - name: Install Python for Ansible (if needed)
      ansible.builtin.raw: |
        if command -v python3 > /dev/null 2>&1; then
          echo "Python3 already installed"
        else
          if command -v apt-get > /dev/null 2>&1; then
            apt-get update && apt-get install -y python3
          elif command -v dnf > /dev/null 2>&1; then
            dnf install -y python3
          elif command -v yum > /dev/null 2>&1; then
            yum install -y python3 
          fi
        fi
      changed_when: false
      failed_when: false

    - name: Ensure essential packages are available
      ansible.builtin.package:
        name:
          - python3
          - sudo
        state: present
      when: apt_update_result is succeeded or (fallback_apt_update is defined and fallback_apt_update.rc is defined and fallback_apt_update.rc == 0)
      failed_when: false

    - name: Verify SSH user exists (RHEL-based systems)
      ansible.builtin.command: "id {{ ansible_user }}"
      register: user_check
      failed_when: false
      changed_when: false
      when: ansible_os_family == 'RedHat'
      
    - name: Display SSH user status
      ansible.builtin.debug:
        msg: "SSH user '{{ ansible_user }}' status: {{ 'EXISTS' if user_check.rc == 0 else 'DOES NOT EXIST' }}"
      when: ansible_os_family == 'RedHat'
      
    - name: Ensure SSH service is running and enabled
      ansible.builtin.service:
        name: "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"
        state: started
        enabled: true
      failed_when: false