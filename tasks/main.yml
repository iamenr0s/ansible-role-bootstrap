---
# tasks file for bootstrap

# Detect OS family for conditional tasks
- name: Gather OS facts
  setup:
    gather_subset:
      - '!all'
      - '!min'
      - distribution

# Create ansible user with sudo privileges
- name: Create ansible user
  user:
    name: ansible
    groups: "{{ 'sudo' if ansible_os_family == 'Debian' else 'wheel' }}"
    append: true
    shell: /bin/bash
    create_home: true
    state: present

- name: Set up passwordless sudo for ansible user
  lineinfile:
    path: /etc/sudoers.d/ansible
    line: 'ansible ALL=(ALL) NOPASSWD:ALL'
    create: true
    mode: '0440'
    validate: 'visudo -cf %s'

- name: Create .ssh directory for ansible user
  file:
    path: /home/ansible/.ssh
    state: directory
    owner: ansible
    group: ansible
    mode: '0700'

- name: Copy authorized keys to ansible user
  copy:
    src: /home/rocky/.ssh/authorized_keys
    dest: /home/ansible/.ssh/authorized_keys
    owner: ansible
    group: ansible
    mode: '0600'
    remote_src: true
  ignore_errors: true

# Configure and secure SSH
- name: Configure SSH daemon
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: true
  loop:
    - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
    - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
    - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
    - { regexp: '^#?AuthorizedKeysFile', line: 'AuthorizedKeysFile .ssh/authorized_keys' }
    - { regexp: '^#?PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
    - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }
  notify: restart sshd

- name: Enable and start SSH service
  service:
    name: "{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}"
    state: started
    enabled: true

# Enable memory control group subsystem (OS-specific)
- name: Enable memory cgroup on Debian-based systems (Raspberry Pi)
  lineinfile:
    path: /boot/firmware/cmdline.txt
    regexp: "^(.*rootwait .*)(?<!{{ cmdline_options }})$"
    line: '\1 {{ cmdline_options }}'
    state: present
    backrefs: true
    create: true
  register: enable_cgroup_debian
  when: ansible_os_family == 'Debian' and ansible_architecture == 'aarch64'

- name: Enable memory cgroup on RHEL-based systems
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX="(.*)"'
    line: 'GRUB_CMDLINE_LINUX="\1 {{ cmdline_options_rhel }}"'
    backrefs: true
  register: enable_cgroup_rhel
  when: ansible_os_family == 'RedHat'

- name: Update GRUB configuration on RHEL-based systems
  command: grub2-mkconfig -o /boot/grub2/grub.cfg
  when: ansible_os_family == 'RedHat' and enable_cgroup_rhel.changed

# Upgrade distribution (OS-specific)
- name: Update package cache (Debian-based)
  apt:
    update_cache: true
    cache_valid_time: 3600
  when: ansible_os_family == 'Debian'

- name: Upgrade distribution (Debian-based)
  apt:
    upgrade: dist
  register: upgrade_distribution_debian
  retries: 5
  until: upgrade_distribution_debian is succeeded
  when: ansible_os_family == 'Debian'

- name: Upgrade distribution (RHEL-based)
  dnf:
    name: '*'
    state: latest
  register: upgrade_distribution_rhel
  retries: 5
  until: upgrade_distribution_rhel is succeeded
  when: ansible_os_family == 'RedHat'

# Check for reboot requirement
- name: Check if reboot is needed (Debian-based)
  stat:
    path: /var/run/reboot-required
  register: reboot_required_file_debian
  when: ansible_os_family == 'Debian'

- name: Check if reboot is needed (RHEL-based)
  command: needs-restarting -r
  register: reboot_required_rhel
  failed_when: false
  changed_when: reboot_required_rhel.rc == 1
  when: ansible_os_family == 'RedHat'

# Reboot if kernel updated
- name: Reboot the box if kernel updated/installed
  reboot:
    msg: "Reboot initiated by Ansible for kernel updates"
    connect_timeout: 5
    pre_reboot_delay: 0
    post_reboot_delay: 30
    reboot_timeout: 600
    test_command: uptime
  when: >
    (ansible_os_family == 'Debian' and (reboot_required_file_debian.stat.exists or enable_cgroup_debian.changed)) or
    (ansible_os_family == 'RedHat' and (reboot_required_rhel.rc == 1 or enable_cgroup_rhel.changed))

- name: Wait for system to become reachable
  wait_for_connection:
    delay: 10
    timeout: 300
  when: >
    (ansible_os_family == 'Debian' and (reboot_required_file_debian.stat.exists or enable_cgroup_debian.changed)) or
    (ansible_os_family == 'RedHat' and (reboot_required_rhel.rc == 1 or enable_cgroup_rhel.changed))

# Generate hosts file
- name: Generate /etc/hosts file
  template:
    src: etc/hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: '0644'

- name: Set hostname
  hostname:
    name: "{{ hostvars[inventory_hostname].inventory_hostname }}"
  notify:
    - restart systemd-logind

# Install bootstrap packages (OS-specific)
- name: Install bootstrap packages (Debian-based)
  apt:
    name: "{{ bootstrap_packages_debian }}"
    state: present
  when: ansible_os_family == 'Debian'

- name: Install bootstrap packages (RHEL-based)
  dnf:
    name: "{{ bootstrap_packages_rhel }}"
    state: present
  when: ansible_os_family == 'RedHat'

# Disable SWAP
- name: Disable SWAP
  shell: |
    swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Disable SWAP in /etc/fstab
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
    mode: '0664'

# Load kernel modules
- name: Load kernel modules
  modprobe:
    name: "{{ item.name }}"
    state: present
    params: "{{ item.params | default(omit) }}"
  loop: "{{ bootstrap_kernel_modules }}"

- name: Ensure kernel modules are loaded at boot
  lineinfile:
    path: /etc/modules-load.d/bootstrap.conf
    line: "{{ item.name }}"
    create: true
  loop: "{{ bootstrap_kernel_modules }}"

# Set kernel parameters
- name: Set kernel parameters
  sysctl:
    name: "{{ item.name }}"
    sysctl_file: "{{ item.file | default(omit) }}"
    sysctl_set: true
    state: present
    reload: true
    value: "{{ item.value }}"
  loop: "{{ bootstrap_kernel_parameters }}"

# Remove rocky user at the end
- name: Remove rocky user
  user:
    name: rocky
    state: absent
    remove: true
    force: true
  ignore_errors: true
